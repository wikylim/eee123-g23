/*  EEE123 COMPUTER PROGRAMMING MINI PROJECT | SEMESTER 1 | SESSION 23/24
    
    GROUP:      23
    TITLE:      Tabular Image Data to Matrix Data Converter (for OpenCV purposes)
    REVISION:   0

    MEMBERS DETAIL
    ROLES





*/

#if __linux__                                           //DO NOT EDIT OR REMOVE
    #define CATCH_CONFIG_RUNNER                         //DO NOT EDIT OR REMOVE
    #include "catch.hpp"                                //DO NOT EDIT OR REMOVE
    int runCatchTests(int argc, char* const argv[]){    //DO NOT EDIT OR REMOVE
        return Catch::Session().run(argc, argv);}       //DO NOT EDIT OR REMOVE
#endif                                                  //DO NOT EDIT OR REMOVE

#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>
#include <algorithm>
#include <stdio.h>

#define cout std::cout
#define endl std::endl

void _sort(int arr[], int size);
void appendMatrix1(int arr[], int size, int xloc);

void displayMatrix(int _data[6][6], char _title[]);

void copyData(int arr1[][2], int rawSize, int rawArr[][2]);

template <std::size_t Rows, std::size_t Cols>
int getIndex(int(&array)[Rows][Cols]){
    return Rows;
}

//---------------------------------- V a r i a b l e s ---------------------------------
const int threshold = 30;

int data[6][6] = {{0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  };


int dataA[6][6] = {{0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  };

//--------------------------------------------------------------------------------------

#include "functions.hpp"

int main(int argc, char* const argv[]){                 //DO NOT EDIT OR REMOVE
    #if __linux__                                       //DO NOT EDIT OR REMOVE
        return runCatchTests(argc, argv);               //DO NOT EDIT OR REMOVE
    #endif                                              //DO NOT EDIT OR REMOVE

    // s t a r t   h e r e . . .

//int raw1[][2] = {{0, 0}, {100, 98}, {99, 99}, {100, 99}, {101, 99}, {98, 100}, {99, 100}, {100, 100}, {101, 100}, {102, 100}, {97, 101}, {98, 101}, {99, 101}, {100, 101}, {101, 101}, {102, 101}, {103, 101}, {98, 102}, {99, 102}, {100, 102}, {101, 102}, {102, 102}, {99, 103}, {100, 103}, {101, 103}, {100, 104}, {600, 197}, {599, 198}, {600, 198}, {601, 198}, {598, 199}, {599, 199}, {600, 199}, {601, 199}, {602, 199}, {597, 200}, {598, 200}, {599, 200}, {600, 200}, {601, 200}, {602, 200}, {603, 200}, {598, 201}, {599, 201}, {600, 201}, {601, 201}, {602, 201}, {599, 202}, {600, 202}, {601, 202}, {600, 203}, {300, 297}, {299, 298}, {300, 298}, {301, 298}, {298, 299}, {299, 299}, {300, 299}, {301, 299}, {302, 299}, {297, 300}, {298, 300}, {299, 300}, {300, 300}, {301, 300}, {302, 300}, {303, 300}, {298, 301}, {299, 301}, {300, 301}, {301, 301}, {302, 301}, {299, 302}, {300, 302}, {301, 302}, {300, 303}, {400, 497}, {399, 498}, {400, 498}, {401, 498}, {398, 499}, {399, 499}, {400, 499}, {401, 499}, {402, 499}, {397, 500}, {398, 500}, {399, 500}, {400, 500}, {401, 500}, {402, 500}, {403, 500}, {398, 501}, {399, 501}, {400, 501}, {401, 501}, {402, 501}, {399, 502}, {400, 502}, {401, 502}, {400, 503}}
//int raw1[][2] = {{0, 0}, {300, 197}, {600, 197}, {299, 198}, {300, 198}, {301, 198}, {599, 198}, {600, 198}, {601, 198}, {298, 199}, {299, 199}, {300, 199}, {301, 199}, {302, 199}, {598, 199}, {599, 199}, {600, 199}, {601, 199}, {602, 199}, {297, 200}, {298, 200}, {299, 200}, {300, 200}, {301, 200}, {302, 200}, {303, 200}, {597, 200}, {598, 200}, {599, 200}, {600, 200}, {601, 200}, {602, 200}, {603, 200}, {298, 201}, {299, 201}, {300, 201}, {301, 201}, {302, 201}, {598, 201}, {599, 201}, {600, 201}, {601, 201}, {602, 201}, {299, 202}, {300, 202}, {301, 202}, {599, 202}, {600, 202}, {601, 202}, {300, 203}, {600, 203}, {500, 297}, {499, 298}, {500, 298}, {501, 298}, {498, 299}, {499, 299}, {500, 299}, {501, 299}, {502, 299}, {497, 300}, {498, 300}, {499, 300}, {500, 300}, {501, 300}, {502, 300}, {503, 300}, {498, 301}, {499, 301}, {500, 301}, {501, 301}, {502, 301}, {499, 302}, {500, 302}, {501, 302}, {500, 303}, {200, 397}, {199, 398}, {200, 398}, {201, 398}, {198, 399}, {199, 399}, {200, 399}, {201, 399}, {202, 399}, {197, 400}, {198, 400}, {199, 400}, {200, 400}, {201, 400}, {202, 400}, {203, 400}, {198, 401}, {199, 401}, {200, 401}, {201, 401}, {202, 401}, {199, 402}, {200, 402}, {201, 402}, {200, 403}, {200, 598}, {199, 599}, {200, 599}, {201, 599}, {198, 600}, {199, 600}, {200, 600}, {201, 600}, {202, 600}, {197, 601}, {198, 601}, {199, 601}, {200, 601}, {201, 601}, {202, 601}, {203, 601}, {198, 602}, {199, 602}, {200, 602}, {201, 602}, {202, 602}, {199, 603}, {200, 603}, {201, 603}, {200, 604}};
//int raw1[][2] = {{0, 0}, {400, 197}, {399, 198}, {400, 198}, {401, 198}, {398, 199}, {399, 199}, {400, 199}, {401, 199}, {402, 199}, {397, 200}, {398, 200}, {399, 200}, {400, 200}, {401, 200}, {402, 200}, {403, 200}, {398, 201}, {399, 201}, {400, 201}, {401, 201}, {402, 201}, {399, 202}, {400, 202}, {401, 202}, {400, 203}, {300, 397}, {299, 398}, {300, 398}, {301, 398}, {298, 399}, {299, 399}, {300, 399}, {301, 399}, {302, 399}, {297, 400}, {298, 400}, {299, 400}, {300, 400}, {301, 400}, {302, 400}, {303, 400}, {298, 401}, {299, 401}, {300, 401}, {301, 401}, {302, 401}, {299, 402}, {300, 402}, {301, 402}, {300, 403}};
//int raw1[][2] = {{0, 0}, {200, 197}, {600, 197}, {199, 198}, {200, 198}, {201, 198}, {599, 198}, {600, 198}, {601, 198}, {198, 199}, {199, 199}, {200, 199}, {201, 199}, {202, 199}, {598, 199}, {599, 199}, {600, 199}, {601, 199}, {602, 199}, {197, 200}, {198, 200}, {199, 200}, {200, 200}, {201, 200}, {202, 200}, {203, 200}, {597, 200}, {598, 200}, {599, 200}, {600, 200}, {601, 200}, {602, 200}, {603, 200}, {198, 201}, {199, 201}, {200, 201}, {201, 201}, {202, 201}, {598, 201}, {599, 201}, {600, 201}, {601, 201}, {602, 201}, {199, 202}, {200, 202}, {201, 202}, {599, 202}, {600, 202}, {601, 202}, {200, 203}, {600, 203}, {400, 297}, {399, 298}, {400, 298}, {401, 298}, {398, 299}, {399, 299}, {400, 299}, {401, 299}, {402, 299}, {397, 300}, {398, 300}, {399, 300}, {400, 300}, {401, 300}, {402, 300}, {403, 300}, {398, 301}, {399, 301}, {400, 301}, {401, 301}, {402, 301}, {399, 302}, {400, 302}, {401, 302}, {400, 303}, {400, 397}, {399, 398}, {400, 398}, {401, 398}, {398, 399}, {399, 399}, {400, 399}, {401, 399}, {402, 399}, {397, 400}, {398, 400}, {399, 400}, {400, 400}, {401, 400}, {402, 400}, {403, 400}, {398, 401}, {399, 401}, {400, 401}, {401, 401}, {402, 401}, {399, 402}, {400, 402}, {401, 402}, {400, 403}, {200, 597}, {199, 598}, {200, 598}, {201, 598}, {198, 599}, {199, 599}, {200, 599}, {201, 599}, {202, 599}, {197, 600}, {198, 600}, {199, 600}, {200, 600}, {201, 600}, {202, 600}, {203, 600}, {198, 601}, {199, 601}, {200, 601}, {201, 601}, {202, 601}, {199, 602}, {200, 602}, {201, 602}, {200, 603}};
//int raw1[][2] = {{0, 0}, {400, 97}, {399, 98}, {400, 98}, {401, 98}, {398, 99}, {399, 99}, {400, 99}, {401, 99}, {402, 99}, {397, 100}, {398, 100}, {399, 100}, {400, 100}, {401, 100}, {402, 100}, {403, 100}, {398, 101}, {399, 101}, {400, 101}, {401, 101}, {402, 101}, {399, 102}, {400, 102}, {401, 102}, {400, 103}, {200, 197}, {199, 198}, {200, 198}, {201, 198}, {198, 199}, {199, 199}, {200, 199}, {201, 199}, {202, 199}, {197, 200}, {198, 200}, {199, 200}, {200, 200}, {201, 200}, {202, 200}, {203, 200}, {198, 201}, {199, 201}, {200, 201}, {201, 201}, {202, 201}, {199, 202}, {200, 202}, {201, 202}, {200, 203}};
//int raw1[][2] = {{0, 0}, {400, 197}, {399, 198}, {400, 198}, {401, 198}, {398, 199}, {399, 199}, {400, 199}, {401, 199}, {402, 199}, {397, 200}, {398, 200}, {399, 200}, {400, 200}, {401, 200}, {402, 200}, {403, 200}, {398, 201}, {399, 201}, {400, 201}, {401, 201}, {402, 201}, {399, 202}, {400, 202}, {401, 202}, {400, 203}, {600, 397}, {599, 398}, {600, 398}, {601, 398}, {598, 399}, {599, 399}, {600, 399}, {601, 399}, {602, 399}, {597, 400}, {598, 400}, {599, 400}, {600, 400}, {601, 400}, {602, 400}, {603, 400}, {598, 401}, {599, 401}, {600, 401}, {601, 401}, {602, 401}, {599, 402}, {600, 402}, {601, 402}, {600, 403}, {600, 497}, {599, 498}, {600, 498}, {601, 498}, {598, 499}, {599, 499}, {600, 499}, {601, 499}, {602, 499}, {597, 500}, {598, 500}, {599, 500}, {600, 500}, {601, 500}, {602, 500}, {603, 500}, {598, 501}, {599, 501}, {600, 501}, {601, 501}, {602, 501}, {599, 502}, {600, 502}, {601, 502}, {600, 503}, {500, 597}, {499, 598}, {500, 598}, {501, 598}, {498, 599}, {499, 599}, {500, 599}, {501, 599}, {502, 599}, {497, 600}, {498, 600}, {499, 600}, {500, 600}, {501, 600}, {502, 600}, {503, 600}, {498, 601}, {499, 601}, {500, 601}, {501, 601}, {502, 601}, {499, 602}, {500, 602}, {501, 602}, {500, 603}};
int raw1[][2] = {{0, 0}, {297, 0}, {298, 0}, {299, 0}, {300, 0}, {301, 0}, {302, 0}, {303, 0}, {597, 0}, {598, 0}, {599, 0}, {600, 0}, {601, 0}, {602, 0}, {603, 0}, {298, 1}, {299, 1}, {300, 1}, {301, 1}, {302, 1}, {598, 1}, {599, 1}, {600, 1}, {601, 1}, {602, 1}, {299, 2}, {300, 2}, {301, 2}, {599, 2}, {600, 2}, {601, 2}, {300, 3}, {600, 3}, {400, 97}, {399, 98}, {400, 98}, {401, 98}, {398, 99}, {399, 99}, {400, 99}, {401, 99}, {402, 99}, {397, 100}, {398, 100}, {399, 100}, {400, 100}, {401, 100}, {402, 100}, {403, 100}, {398, 101}, {399, 101}, {400, 101}, {401, 101}, {402, 101}, {399, 102}, {400, 102}, {401, 102}, {400, 103}, {200, 197}, {199, 198}, {200, 198}, {201, 198}, {198, 199}, {199, 199}, {200, 199}, {201, 199}, {202, 199}, {197, 200}, {198, 200}, {199, 200}, {200, 200}, {201, 200}, {202, 200}, {203, 200}, {198, 201}, {199, 201}, {200, 201}, {201, 201}, {202, 201}, {199, 202}, {200, 202}, {201, 202}, {200, 203}, {500, 497}, {499, 498}, {500, 498}, {501, 498}, {498, 499}, {499, 499}, {500, 499}, {501, 499}, {502, 499}, {497, 500}, {498, 500}, {499, 500}, {500, 500}, {501, 500}, {502, 500}, {503, 500}, {498, 501}, {499, 501}, {500, 501}, {501, 501}, {502, 501}, {499, 502}, {500, 502}, {501, 502}, {500, 503}};

//---------------------- P r o c e s s   &   a p p e n d   r a w   d a t a -------------------------------

cout << "raw1 index: " << getIndex(raw1) << endl;
int data1_Index = getIndex(raw1);
int data1[getIndex(raw1)][2];                   // declaring data1
copyData(data1, data1_Index, raw1);

data1_Index--;                  // after removing (0, 0), decrease the size of array by 1

//-----------------------------------------------------------------------------------------------------------------------------------------------------

//---------------------------------- s o r t   b y   x - c o o r d i n a t e   i n   a s c e n d i n g   o r d e r ---------------------------------

for(int i=1;i<data1_Index;i++){
    for(int i=0;i<data1_Index-1;i++){
        if(data1[i+1][0]<data1[i][0]){
            int tempdata[2];
            tempdata[0]=data1[i][0];
            tempdata[1]=data1[i][1];

            data1[i][0]=data1[i+1][0];
            data1[i][1]=data1[i+1][1];
    
            data1[i+1][0]=tempdata[0];
            data1[i+1][1]=tempdata[1];
        }
    }
}
    
cout << "\n";
//-----------------------------------------------------------------------------------------------------------------------------------------------------

//------------------------------------ D i s p l a y   d a t a   a r r a y -------------------------------------------
cout << "\n>data1" << endl;
if(data1_Index>0){
    for(int i=0;i<data1_Index;i++){
        for(int j=0;j<2;j++){
            cout << data1[i][j] << " ";
        }
        cout << "\n";
    }
}
else{cout << "Empty data!" << endl;}

cout << "\n";
//-----------------------------------------------------------------------------------------------------------------------------------------------------








int xcoord1[6] = {0, 0, 0, 0, 0, 0};                    // number of data exists across the x-axis

//-----debugging variables----------
int x1Jump[5] = {0, 0, 0, 0, 0};                               // indexes where distinct data appears

int difference[3] = {1, 1, 1}; // number of distinct data, every data must have at least 1 distinct data, 1st index for raw1, 2nd index for raw2, 3rd index for raw3
//----------------------------------
cout << "---------------------- R E P O R T   1 ----------------------" << endl;
cout << "number of indexes found: " << data1_Index << endl;
if(data1_Index>0){                                          // not empty set
    for(int i=0;i<data1_Index;i++){
        int indx = int(round(static_cast<double>(data1[i][0])/100.0)-1);
        xcoord1[indx]++;
        if(i!=data1_Index-1 && data1[i+1][0]-data1[i][0]>threshold){            // distinct value
            difference[0]++;
            cout << "found 1 difference! current difference: " << difference[0] << ", current index: " << i << ", index jump: " << i+1 << endl;
            x1Jump[difference[0]-1] = i+1;
        }
    }
    cout << "\nJump Index > { " ;
    for(int i=0;i<6;i++){
    cout << x1Jump[i] << " ";
    }cout << "}" << endl;

    cout << "\n{ " ;
    for(int i=0;i<6;i++){
    cout << xcoord1[i] << "\t";
    }cout << "}" << endl;
    cout << "\n" << difference[0] << " distinct x-coordinates found!" << endl;

}
else{cout << "Empty data! No coordinates found!" << endl;}
cout << "-------------------------------------------------------------\n" << endl;

//------------------------------------------ append y-coordinates into each respective column ---------------------------------
int x100A[xcoord1[0]] = {0};
int x200A[xcoord1[1]] = {0};
int x300A[xcoord1[2]] = {0};
int x400A[xcoord1[3]] = {0};
int x500A[xcoord1[4]] = {0};
int x600A[xcoord1[5]] = {0};
if(data1_Index>0){
for(int i=0;i<xcoord1[0];i++){
    x100A[i]=data1[i][1];
}
for(int i=0;i<xcoord1[1];i++){
    x200A[i]=data1[i+xcoord1[0]][1];
}
for(int i=0;i<xcoord1[2];i++){
    x300A[i]=data1[i+xcoord1[0]+xcoord1[1]][1];
}
for(int i=0;i<xcoord1[3];i++){
    x400A[i]=data1[i+xcoord1[0]+xcoord1[1]+xcoord1[2]][1];
}
for(int i=0;i<xcoord1[4];i++){
    x500A[i]=data1[i+xcoord1[0]+xcoord1[1]+xcoord1[2]+xcoord1[3]][1];
}
for(int i=0;i<xcoord1[5];i++){
    x600A[i]=data1[i+xcoord1[0]+xcoord1[1]+xcoord1[2]+xcoord1[3]+xcoord1[4]][1];
}
}

//----------------------------------------------------------------------------------------------------------------------------

//---------------------------------- s o r t   b y   y - c o o r d i n a t e   i n   a s c e n d i n g   o r d e r ---------------------------------
if(data1_Index>0){
_sort(x100A, xcoord1[0]);
_sort(x200A, xcoord1[1]);
_sort(x300A, xcoord1[2]);
_sort(x400A, xcoord1[3]);
_sort(x500A, xcoord1[4]);
_sort(x600A, xcoord1[5]);
appendMatrix1(x100A, xcoord1[0], 0);
appendMatrix1(x200A, xcoord1[1], 1);
appendMatrix1(x300A, xcoord1[2], 2);
appendMatrix1(x400A, xcoord1[3], 3);
appendMatrix1(x500A, xcoord1[4], 4);
appendMatrix1(x600A, xcoord1[5], 5);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------

/*/set data1 into 1
for(int i=0;i<6;i++){
    for(int j=0;j<6;j++){
        if(dataA[i][j]!=0){
            dataA[i][j]=1;
        }
    }
}*/

//------------------------------------- display appended y-coordinates --------------------------------------------
//cout << x100A[0] << endl;
cout << "\ndata1 y-coord: ";
cout << "\nx100A: ";
for(int i=0;i<xcoord1[0];i++){              // get xcoord y-coordinate for raw1
    cout << x100A[i] << " ";                 // x location = 100
}
cout << "\nx200A: ";
for(int i=0;i<xcoord1[1];i++){
    cout << x200A[i] << " ";
}
cout << "\nx300A: ";
for(int i=0;i<xcoord1[2];i++){
    cout << x300A[i] << " ";
}
cout << "\nx400A: ";
for(int i=0;i<xcoord1[3];i++){
    cout << x400A[i] << " ";
}
cout << "\nx500A: ";
for(int i=0;i<xcoord1[4];i++){
    cout << x500A[i] << " ";
}
cout << "\nx600A: ";
for(int i=0;i<xcoord1[5];i++){
    cout << x600A[i] << " ";
}
//------------------------------------------------------------------------------------------------------------------



/*/cout << "\n" << ydifference << " distinct y-coordinates found across x100A!" << endl;
cout << "\n";
for(int i=0;i<6;i++){               // dont care the unknown indexes, get every index+1, if index number later 0 is 0, ignore, maximum contain 6 distinct location
    cout << "jump index " << i+1 << " : " << x1Jump[i] << endl;
}*/
cout << "\n\n";


// Add dataA into Matrix
for(int i=0;i<6;i++){
        for(int j=0;j<6;j++){
            data[i][j] += dataA[i][j];
        }
    }
    
displayMatrix(dataA, "R a w   1");

return 0;

}















//----------------------------------------------------------------------------------------------

void copyData(int arr1[][2], int rawSize, int rawArr[][2]){
    for (int i=0;i<rawSize;i++){
    for(int j=0;j<2;j++){
        arr1[i][j] = rawArr[i+1][j];             // skip copying (0, 0)
    }
}
}

void _sort(int arr[], int size){
    for(int i=1;i<size;i++){
        for(int i=0;i<size-1;i++){
            if(arr[i]>arr[i+1]){
                int temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;
            }
        }
    }
}

void appendMatrix1(int arr[], int size, int xloc){
//x100A
//int ycoord1[6] = {0, 0, 0, 0, 0, 0};
//int ydifference = 1;
for(int i=0;i<size;i++){
    //ycoord1[indx]++;
    if(arr[i]==0){                                 //filter out (0, 0)
        cout << "zero!!" << endl;
    }
    else{
        int indx = int((round(static_cast<double>(arr[i])/100.0)-1));
        dataA[indx][xloc]++;
        }
    }
}

void displayMatrix(int _data[6][6], char _title[]){
    cout << "------------- M a t r i x   d a t a   f o r   " << _title << " -----------------------\n" << endl;
    cout << "\tR1\tR2\tR3\tR4\tR5\tNS" << endl;
    for(int j=0;j<6;j++){
        if(j<4){
            cout << "D\t";
        }
        else{cout << "R\t";}
        for(int i=0;i<6;i++){
            cout << _data[j][i] << "\t";
        }
        cout << "\n";
    }
    cout << "\n---------------------------------------------------------------------------\n";

}










