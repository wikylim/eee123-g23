/*  EEE123 COMPUTER PROGRAMMING MINI PROJECT | SEMESTER 1 | SESSION 23/24
    
    GROUP:      23
    TITLE:      Tabular Image Data to Matrix Data Converter (for OpenCV purposes)
    VERSION:    (1) 1
    REVISION:   1.61

    MEMBERS DETAIL
    ROLES




    limitations of code:
    - using file contents with the format " raw1>> [{0, 0}, {0, 0}, {0, 0}, ... {0, 0}]", any changes of the format of the input files will result in error of code
    - works within the coordinates (x, y) = (100, 100) to (600, 600)

*/

#if __linux__                                           //DO NOT EDIT OR REMOVE
    #define CATCH_CONFIG_RUNNER                         //DO NOT EDIT OR REMOVE
    #include "catch.hpp"                                //DO NOT EDIT OR REMOVE
    int runCatchTests(int argc, char* const argv[]){    //DO NOT EDIT OR REMOVE
        return Catch::Session().run(argc, argv);}       //DO NOT EDIT OR REMOVE
#endif                                                  //DO NOT EDIT OR REMOVE

//#include <iomanip>
//#include <algorithm>
#include <iostream>
#include <string>
#include <cmath>
#include <stdio.h>
#include <fstream>
#include <vector>
#include "functions.hpp"


#define cout std::cout
#define oout outputFile
#define endl std::endl
#define string std::string
#define vector std::vector

//---------------------------------- V a r i a b l e s ---------------------------------
const int threshold = 30;
string file1 = "raw1.txt";
string file2 = "raw2.txt";
string file3 = "raw3.txt";
string outputTxt = "output.txt";

// for output
bool _toggleClear = 0;              // clean mode

int data[6][6] = {{0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  };

int dataV[6][6] = {{0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  };

int dataA[6][6] = {{0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  };
int dataB[6][6] = {{0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  };
int dataC[6][6] = {{0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  {0, 0, 0, 0, 0, 0},
                  };

vector<vector<vector<int>>> xcoord(3, vector<vector<int>>(6, vector<int>(0)));
void vectorDataDisplay();


//int raw1[][2] = {{0, 0}};
//int raw1[][2] = {{0, 0}, {100, 98}, {99, 99}, {100, 99}, {101, 99}, {98, 100}, {99, 100}, {100, 100}, {101, 100}, {102, 100}, {97, 101}, {98, 101}, {99, 101}, {100, 101}, {101, 101}, {102, 101}, {103, 101}, {98, 102}, {99, 102}, {100, 102}, {101, 102}, {102, 102}, {99, 103}, {100, 103}, {101, 103}, {100, 104}, {600, 197}, {599, 198}, {600, 198}, {601, 198}, {598, 199}, {599, 199}, {600, 199}, {601, 199}, {602, 199}, {597, 200}, {598, 200}, {599, 200}, {600, 200}, {601, 200}, {602, 200}, {603, 200}, {598, 201}, {599, 201}, {600, 201}, {601, 201}, {602, 201}, {599, 202}, {600, 202}, {601, 202}, {600, 203}, {300, 297}, {299, 298}, {300, 298}, {301, 298}, {298, 299}, {299, 299}, {300, 299}, {301, 299}, {302, 299}, {297, 300}, {298, 300}, {299, 300}, {300, 300}, {301, 300}, {302, 300}, {303, 300}, {298, 301}, {299, 301}, {300, 301}, {301, 301}, {302, 301}, {299, 302}, {300, 302}, {301, 302}, {300, 303}, {400, 497}, {399, 498}, {400, 498}, {401, 498}, {398, 499}, {399, 499}, {400, 499}, {401, 499}, {402, 499}, {397, 500}, {398, 500}, {399, 500}, {400, 500}, {401, 500}, {402, 500}, {403, 500}, {398, 501}, {399, 501}, {400, 501}, {401, 501}, {402, 501}, {399, 502}, {400, 502}, {401, 502}, {400, 503}};
//int raw1[][2] = {{0, 0}, {300, 197}, {600, 197}, {299, 198}, {300, 198}, {301, 198}, {599, 198}, {600, 198}, {601, 198}, {298, 199}, {299, 199}, {300, 199}, {301, 199}, {302, 199}, {598, 199}, {599, 199}, {600, 199}, {601, 199}, {602, 199}, {297, 200}, {298, 200}, {299, 200}, {300, 200}, {301, 200}, {302, 200}, {303, 200}, {597, 200}, {598, 200}, {599, 200}, {600, 200}, {601, 200}, {602, 200}, {603, 200}, {298, 201}, {299, 201}, {300, 201}, {301, 201}, {302, 201}, {598, 201}, {599, 201}, {600, 201}, {601, 201}, {602, 201}, {299, 202}, {300, 202}, {301, 202}, {599, 202}, {600, 202}, {601, 202}, {300, 203}, {600, 203}, {500, 297}, {499, 298}, {500, 298}, {501, 298}, {498, 299}, {499, 299}, {500, 299}, {501, 299}, {502, 299}, {497, 300}, {498, 300}, {499, 300}, {500, 300}, {501, 300}, {502, 300}, {503, 300}, {498, 301}, {499, 301}, {500, 301}, {501, 301}, {502, 301}, {499, 302}, {500, 302}, {501, 302}, {500, 303}, {200, 397}, {199, 398}, {200, 398}, {201, 398}, {198, 399}, {199, 399}, {200, 399}, {201, 399}, {202, 399}, {197, 400}, {198, 400}, {199, 400}, {200, 400}, {201, 400}, {202, 400}, {203, 400}, {198, 401}, {199, 401}, {200, 401}, {201, 401}, {202, 401}, {199, 402}, {200, 402}, {201, 402}, {200, 403}, {200, 598}, {199, 599}, {200, 599}, {201, 599}, {198, 600}, {199, 600}, {200, 600}, {201, 600}, {202, 600}, {197, 601}, {198, 601}, {199, 601}, {200, 601}, {201, 601}, {202, 601}, {203, 601}, {198, 602}, {199, 602}, {200, 602}, {201, 602}, {202, 602}, {199, 603}, {200, 603}, {201, 603}, {200, 604}};
//int raw1[][2] = {{0, 0}, {400, 197}, {399, 198}, {400, 198}, {401, 198}, {398, 199}, {399, 199}, {400, 199}, {401, 199}, {402, 199}, {397, 200}, {398, 200}, {399, 200}, {400, 200}, {401, 200}, {402, 200}, {403, 200}, {398, 201}, {399, 201}, {400, 201}, {401, 201}, {402, 201}, {399, 202}, {400, 202}, {401, 202}, {400, 203}, {300, 397}, {299, 398}, {300, 398}, {301, 398}, {298, 399}, {299, 399}, {300, 399}, {301, 399}, {302, 399}, {297, 400}, {298, 400}, {299, 400}, {300, 400}, {301, 400}, {302, 400}, {303, 400}, {298, 401}, {299, 401}, {300, 401}, {301, 401}, {302, 401}, {299, 402}, {300, 402}, {301, 402}, {300, 403}};
//int raw1[][2] = {{0, 0}, {200, 197}, {600, 197}, {199, 198}, {200, 198}, {201, 198}, {599, 198}, {600, 198}, {601, 198}, {198, 199}, {199, 199}, {200, 199}, {201, 199}, {202, 199}, {598, 199}, {599, 199}, {600, 199}, {601, 199}, {602, 199}, {197, 200}, {198, 200}, {199, 200}, {200, 200}, {201, 200}, {202, 200}, {203, 200}, {597, 200}, {598, 200}, {599, 200}, {600, 200}, {601, 200}, {602, 200}, {603, 200}, {198, 201}, {199, 201}, {200, 201}, {201, 201}, {202, 201}, {598, 201}, {599, 201}, {600, 201}, {601, 201}, {602, 201}, {199, 202}, {200, 202}, {201, 202}, {599, 202}, {600, 202}, {601, 202}, {200, 203}, {600, 203}, {400, 297}, {399, 298}, {400, 298}, {401, 298}, {398, 299}, {399, 299}, {400, 299}, {401, 299}, {402, 299}, {397, 300}, {398, 300}, {399, 300}, {400, 300}, {401, 300}, {402, 300}, {403, 300}, {398, 301}, {399, 301}, {400, 301}, {401, 301}, {402, 301}, {399, 302}, {400, 302}, {401, 302}, {400, 303}, {400, 397}, {399, 398}, {400, 398}, {401, 398}, {398, 399}, {399, 399}, {400, 399}, {401, 399}, {402, 399}, {397, 400}, {398, 400}, {399, 400}, {400, 400}, {401, 400}, {402, 400}, {403, 400}, {398, 401}, {399, 401}, {400, 401}, {401, 401}, {402, 401}, {399, 402}, {400, 402}, {401, 402}, {400, 403}, {200, 597}, {199, 598}, {200, 598}, {201, 598}, {198, 599}, {199, 599}, {200, 599}, {201, 599}, {202, 599}, {197, 600}, {198, 600}, {199, 600}, {200, 600}, {201, 600}, {202, 600}, {203, 600}, {198, 601}, {199, 601}, {200, 601}, {201, 601}, {202, 601}, {199, 602}, {200, 602}, {201, 602}, {200, 603}};
//int raw1[][2] = {{0, 0}, {400, 97}, {399, 98}, {400, 98}, {401, 98}, {398, 99}, {399, 99}, {400, 99}, {401, 99}, {402, 99}, {397, 100}, {398, 100}, {399, 100}, {400, 100}, {401, 100}, {402, 100}, {403, 100}, {398, 101}, {399, 101}, {400, 101}, {401, 101}, {402, 101}, {399, 102}, {400, 102}, {401, 102}, {400, 103}, {200, 197}, {199, 198}, {200, 198}, {201, 198}, {198, 199}, {199, 199}, {200, 199}, {201, 199}, {202, 199}, {197, 200}, {198, 200}, {199, 200}, {200, 200}, {201, 200}, {202, 200}, {203, 200}, {198, 201}, {199, 201}, {200, 201}, {201, 201}, {202, 201}, {199, 202}, {200, 202}, {201, 202}, {200, 203}};
//int raw1[][2] = {{0, 0}, {400, 197}, {399, 198}, {400, 198}, {401, 198}, {398, 199}, {399, 199}, {400, 199}, {401, 199}, {402, 199}, {397, 200}, {398, 200}, {399, 200}, {400, 200}, {401, 200}, {402, 200}, {403, 200}, {398, 201}, {399, 201}, {400, 201}, {401, 201}, {402, 201}, {399, 202}, {400, 202}, {401, 202}, {400, 203}, {600, 397}, {599, 398}, {600, 398}, {601, 398}, {598, 399}, {599, 399}, {600, 399}, {601, 399}, {602, 399}, {597, 400}, {598, 400}, {599, 400}, {600, 400}, {601, 400}, {602, 400}, {603, 400}, {598, 401}, {599, 401}, {600, 401}, {601, 401}, {602, 401}, {599, 402}, {600, 402}, {601, 402}, {600, 403}, {600, 497}, {599, 498}, {600, 498}, {601, 498}, {598, 499}, {599, 499}, {600, 499}, {601, 499}, {602, 499}, {597, 500}, {598, 500}, {599, 500}, {600, 500}, {601, 500}, {602, 500}, {603, 500}, {598, 501}, {599, 501}, {600, 501}, {601, 501}, {602, 501}, {599, 502}, {600, 502}, {601, 502}, {600, 503}, {500, 597}, {499, 598}, {500, 598}, {501, 598}, {498, 599}, {499, 599}, {500, 599}, {501, 599}, {502, 599}, {497, 600}, {498, 600}, {499, 600}, {500, 600}, {501, 600}, {502, 600}, {503, 600}, {498, 601}, {499, 601}, {500, 601}, {501, 601}, {502, 601}, {499, 602}, {500, 602}, {501, 602}, {500, 603}};
//int raw1[][2] = {{0, 0}, {297, 0}, {298, 0}, {299, 0}, {300, 0}, {301, 0}, {302, 0}, {303, 0}, {597, 0}, {598, 0}, {599, 0}, {600, 0}, {601, 0}, {602, 0}, {603, 0}, {298, 1}, {299, 1}, {300, 1}, {301, 1}, {302, 1}, {598, 1}, {599, 1}, {600, 1}, {601, 1}, {602, 1}, {299, 2}, {300, 2}, {301, 2}, {599, 2}, {600, 2}, {601, 2}, {300, 3}, {600, 3}, {400, 97}, {399, 98}, {400, 98}, {401, 98}, {398, 99}, {399, 99}, {400, 99}, {401, 99}, {402, 99}, {397, 100}, {398, 100}, {399, 100}, {400, 100}, {401, 100}, {402, 100}, {403, 100}, {398, 101}, {399, 101}, {400, 101}, {401, 101}, {402, 101}, {399, 102}, {400, 102}, {401, 102}, {400, 103}, {200, 197}, {199, 198}, {200, 198}, {201, 198}, {198, 199}, {199, 199}, {200, 199}, {201, 199}, {202, 199}, {197, 200}, {198, 200}, {199, 200}, {200, 200}, {201, 200}, {202, 200}, {203, 200}, {198, 201}, {199, 201}, {200, 201}, {201, 201}, {202, 201}, {199, 202}, {200, 202}, {201, 202}, {200, 203}, {500, 497}, {499, 498}, {500, 498}, {501, 498}, {498, 499}, {499, 499}, {500, 499}, {501, 499}, {502, 499}, {497, 500}, {498, 500}, {499, 500}, {500, 500}, {501, 500}, {502, 500}, {503, 500}, {498, 501}, {499, 501}, {500, 501}, {501, 501}, {502, 501}, {499, 502}, {500, 502}, {501, 502}, {500, 503}};

//int raw1[][2] = {{0, 0}, {400, 197}, {399, 198}, {400, 198}, {401, 198}, {398, 199}, {399, 199}, {400, 199}, {401, 199}, {402, 199}, {397, 200}, {398, 200}, {399, 200}, {400, 200}, {401, 200}, {402, 200}, {403, 200}, {398, 201}, {399, 201}, {400, 201}, {401, 201}, {402, 201}, {399, 202}, {400, 202}, {401, 202}, {400, 203}, {600, 397}, {599, 398}, {600, 398}, {601, 398}, {598, 399}, {599, 399}, {600, 399}, {601, 399}, {602, 399}, {597, 400}, {598, 400}, {599, 400}, {600, 400}, {601, 400}, {602, 400}, {603, 400}, {598, 401}, {599, 401}, {600, 401}, {601, 401}, {602, 401}, {599, 402}, {600, 402}, {601, 402}, {600, 403}, {600, 497}, {599, 498}, {600, 498}, {601, 498}, {598, 499}, {599, 499}, {600, 499}, {601, 499}, {602, 499}, {597, 500}, {598, 500}, {599, 500}, {600, 500}, {601, 500}, {602, 500}, {603, 500}, {598, 501}, {599, 501}, {600, 501}, {601, 501}, {602, 501}, {599, 502}, {600, 502}, {601, 502}, {600, 503}, {500, 597}, {499, 598}, {500, 598}, {501, 598}, {498, 599}, {499, 599}, {500, 599}, {501, 599}, {502, 599}, {497, 600}, {498, 600}, {499, 600}, {500, 600}, {501, 600}, {502, 600}, {503, 600}, {498, 601}, {499, 601}, {500, 601}, {501, 601}, {502, 601}, {499, 602}, {500, 602}, {501, 602}, {500, 603}};
//int raw2[][2] = {{0, 0}, {100, 98}, {99, 99}, {100, 99}, {101, 99}, {98, 100}, {99, 100}, {100, 100}, {101, 100}, {102, 100}, {97, 101}, {98, 101}, {99, 101}, {100, 101}, {101, 101}, {102, 101}, {103, 101}, {98, 102}, {99, 102}, {100, 102}, {101, 102}, {102, 102}, {99, 103}, {100, 103}, {101, 103}, {100, 104}, {500, 197}, {199, 198}, {499, 198}, {500, 198}, {501, 198}, {198, 199}, {199, 199}, {200, 199}, {498, 199}, {499, 199}, {500, 199}, {501, 199}, {502, 199}, {197, 200}, {198, 200}, {199, 200}, {200, 200}, {201, 200}, {497, 200}, {498, 200}, {499, 200}, {500, 200}, {501, 200}, {502, 200}, {503, 200}, {196, 201}, {197, 201}, {198, 201}, {199, 201}, {200, 201}, {201, 201}, {202, 201}, {498, 201}, {499, 201}, {500, 201}, {501, 201}, {502, 201}, {197, 202}, {198, 202}, {199, 202}, {200, 202}, {201, 202}, {499, 202}, {500, 202}, {501, 202}, {198, 203}, {199, 203}, {200, 203}, {500, 203}, {199, 204}, {100, 397}, {300, 397}, {99, 398}, {100, 398}, {101, 398}, {299, 398}, {300, 398}, {301, 398}, {98, 399}, {99, 399}, {100, 399}, {101, 399}, {102, 399}, {298, 399}, {299, 399}, {300, 399}, {301, 399}, {302, 399}, {97, 400}, {98, 400}, {99, 400}, {100, 400}, {101, 400}, {102, 400}, {103, 400}, {297, 400}, {298, 400}, {299, 400}, {300, 400}, {301, 400}, {302, 400}, {303, 400}, {98, 401}, {99, 401}, {100, 401}, {101, 401}, {102, 401}, {298, 401}, {299, 401}, {300, 401}, {301, 401}, {302, 401}, {99, 402}, {100, 402}, {101, 402}, {299, 402}, {300, 402}, {301, 402}, {100, 403}, {300, 403}, {500, 497}, {499, 498}, {500, 498}, {501, 498}, {498, 499}, {499, 499}, {500, 499}, {501, 499}, {502, 499}, {497, 500}, {498, 500}, {499, 500}, {500, 500}, {501, 500}, {502, 500}, {503, 500}, {498, 501}, {499, 501}, {500, 501}, {501, 501}, {502, 501}, {499, 502}, {500, 502}, {501, 502}, {500, 503}};
//int raw3[][2] = {{0, 0}, {599, 98}, {600, 98}, {601, 98}, {598, 99}, {599, 99}, {600, 99}, {601, 99}, {602, 99}, {598, 100}, {599, 100}, {600, 100}, {601, 100}, {602, 100}, {598, 101}, {599, 101}, {600, 101}, {601, 101}, {602, 101}, {599, 102}, {600, 102}, {601, 102}, {399, 298}, {400, 298}, {401, 298}, {398, 299}, {399, 299}, {400, 299}, {401, 299}, {402, 299}, {398, 300}, {399, 300}, {400, 300}, {401, 300}, {402, 300}, {398, 301}, {399, 301}, {400, 301}, {401, 301}, {402, 301}, {399, 302}, {400, 302}, {401, 302}, {199, 498}, {200, 498}, {201, 498}, {198, 499}, {199, 499}, {200, 499}, {201, 499}, {202, 499}, {198, 500}, {199, 500}, {200, 500}, {201, 500}, {202, 500}, {198, 501}, {199, 501}, {200, 501}, {201, 501}, {202, 501}, {199, 502}, {200, 502}, {201, 502}, {299, 598}, {300, 598}, {301, 598}, {298, 599}, {299, 599}, {300, 599}, {301, 599}, {302, 599}, {298, 600}, {299, 600}, {300, 600}, {301, 600}, {302, 600}, {298, 601}, {299, 601}, {300, 601}, {301, 601}, {302, 601}, {299, 602}, {300, 602}, {301, 602}};

//int raw2[][2] = {{0, 0}};
//int raw2[][2] = {{0, 0}, {100, 98}, {99, 99}, {100, 99}, {101, 99}, {98, 100}, {99, 100}, {100, 100}, {101, 100}, {102, 100}, {97, 101}, {98, 101}, {99, 101}, {100, 101}, {101, 101}, {102, 101}, {103, 101}, {98, 102}, {99, 102}, {100, 102}, {101, 102}, {102, 102}, {99, 103}, {100, 103}, {101, 103}, {100, 104}, {200, 297}, {199, 298}, {200, 298}, {201, 298}, {198, 299}, {199, 299}, {200, 299}, {201, 299}, {202, 299}, {197, 300}, {198, 300}, {199, 300}, {200, 300}, {201, 300}, {202, 300}, {203, 300}, {198, 301}, {199, 301}, {200, 301}, {201, 301}, {202, 301}, {199, 302}, {200, 302}, {201, 302}, {200, 303}, {500, 497}, {499, 498}, {500, 498}, {501, 498}, {498, 499}, {499, 499}, {500, 499}, {501, 499}, {502, 499}, {497, 500}, {498, 500}, {499, 500}, {500, 500}, {501, 500}, {502, 500}, {503, 500}, {498, 501}, {499, 501}, {500, 501}, {501, 501}, {502, 501}, {499, 502}, {500, 502}, {501, 502}, {500, 503}, {400, 597}, {399, 598}, {400, 598}, {401, 598}, {398, 599}, {399, 599}, {400, 599}, {401, 599}, {402, 599}, {397, 600}, {398, 600}, {399, 600}, {400, 600}, {401, 600}, {402, 600}, {403, 600}, {398, 601}, {399, 601}, {400, 601}, {401, 601}, {402, 601}, {399, 602}, {400, 602}, {401, 602}, {400, 603}};
//int raw2[][2] = {{0, 0}, {200, 97}, {199, 98}, {200, 98}, {201, 98}, {198, 99}, {199, 99}, {200, 99}, {201, 99}, {202, 99}, {197, 100}, {198, 100}, {199, 100}, {200, 100}, {201, 100}, {202, 100}, {203, 100}, {198, 101}, {199, 101}, {200, 101}, {201, 101}, {202, 101}, {199, 102}, {200, 102}, {201, 102}, {200, 103}, {100, 197}, {400, 197}, {99, 198}, {100, 198}, {101, 198}, {399, 198}, {400, 198}, {401, 198}, {98, 199}, {99, 199}, {100, 199}, {101, 199}, {102, 199}, {398, 199}, {399, 199}, {400, 199}, {401, 199}, {402, 199}, {97, 200}, {98, 200}, {99, 200}, {100, 200}, {101, 200}, {102, 200}, {103, 200}, {397, 200}, {398, 200}, {399, 200}, {400, 200}, {401, 200}, {402, 200}, {403, 200}, {98, 201}, {99, 201}, {100, 201}, {101, 201}, {102, 201}, {398, 201}, {399, 201}, {400, 201}, {401, 201}, {402, 201}, {99, 202}, {100, 202}, {101, 202}, {399, 202}, {400, 202}, {401, 202}, {100, 203}, {400, 203}, {600, 397}, {200, 398}, {599, 398}, {600, 398}, {601, 398}, {199, 399}, {200, 399}, {201, 399}, {598, 399}, {599, 399}, {600, 399}, {601, 399}, {602, 399}, {198, 400}, {199, 400}, {200, 400}, {201, 400}, {202, 400}, {597, 400}, {598, 400}, {599, 400}, {600, 400}, {601, 400}, {602, 400}, {603, 400}, {197, 401}, {198, 401}, {199, 401}, {200, 401}, {201, 401}, {202, 401}, {203, 401}, {598, 401}, {599, 401}, {600, 401}, {601, 401}, {602, 401}, {198, 402}, {199, 402}, {200, 402}, {201, 402}, {202, 402}, {599, 402}, {600, 402}, {601, 402}, {199, 403}, {200, 403}, {201, 403}, {600, 403}, {200, 404}, {400, 497}, {399, 498}, {400, 498}, {401, 498}, {398, 499}, {399, 499}, {400, 499}, {401, 499}, {402, 499}, {397, 500}, {398, 500}, {399, 500}, {400, 500}, {401, 500}, {402, 500}, {403, 500}, {398, 501}, {399, 501}, {400, 501}, {401, 501}, {402, 501}, {399, 502}, {400, 502}, {401, 502}, {400, 503}, {600, 597}, {599, 598}, {600, 598}, {601, 598}, {598, 599}, {599, 599}, {600, 599}, {601, 599}, {602, 599}, {597, 600}, {598, 600}, {599, 600}, {600, 600}, {601, 600}, {602, 600}, {603, 600}, {598, 601}, {599, 601}, {600, 601}, {601, 601}, {602, 601}, {599, 602}, {600, 602}, {601, 602}, {600, 603}};
//int raw2[][2] = {{0, 0}, {300, 397}, {299, 398}, {300, 398}, {301, 398}, {298, 399}, {299, 399}, {300, 399}, {301, 399}, {302, 399}, {297, 400}, {298, 400}, {299, 400}, {300, 400}, {301, 400}, {302, 400}, {303, 400}, {298, 401}, {299, 401}, {300, 401}, {301, 401}, {302, 401}, {299, 402}, {300, 402}, {301, 402}, {300, 403}, {600, 597}, {599, 598}, {600, 598}, {601, 598}, {598, 599}, {599, 599}, {600, 599}, {601, 599}, {602, 599}, {597, 600}, {598, 600}, {599, 600}, {600, 600}, {601, 600}, {602, 600}, {603, 600}, {598, 601}, {599, 601}, {600, 601}, {601, 601}, {602, 601}, {599, 602}, {600, 602}, {601, 602}, {600, 603}};
//int raw2[][2] = {{0, 0}, {100, 98}, {99, 99}, {100, 99}, {101, 99}, {98, 100}, {99, 100}, {100, 100}, {101, 100}, {102, 100}, {97, 101}, {98, 101}, {99, 101}, {100, 101}, {101, 101}, {102, 101}, {103, 101}, {98, 102}, {99, 102}, {100, 102}, {101, 102}, {102, 102}, {99, 103}, {100, 103}, {101, 103}, {100, 104}, {500, 197}, {199, 198}, {499, 198}, {500, 198}, {501, 198}, {198, 199}, {199, 199}, {200, 199}, {498, 199}, {499, 199}, {500, 199}, {501, 199}, {502, 199}, {197, 200}, {198, 200}, {199, 200}, {200, 200}, {201, 200}, {497, 200}, {498, 200}, {499, 200}, {500, 200}, {501, 200}, {502, 200}, {503, 200}, {196, 201}, {197, 201}, {198, 201}, {199, 201}, {200, 201}, {201, 201}, {202, 201}, {498, 201}, {499, 201}, {500, 201}, {501, 201}, {502, 201}, {197, 202}, {198, 202}, {199, 202}, {200, 202}, {201, 202}, {499, 202}, {500, 202}, {501, 202}, {198, 203}, {199, 203}, {200, 203}, {500, 203}, {199, 204}, {100, 397}, {300, 397}, {99, 398}, {100, 398}, {101, 398}, {299, 398}, {300, 398}, {301, 398}, {98, 399}, {99, 399}, {100, 399}, {101, 399}, {102, 399}, {298, 399}, {299, 399}, {300, 399}, {301, 399}, {302, 399}, {97, 400}, {98, 400}, {99, 400}, {100, 400}, {101, 400}, {102, 400}, {103, 400}, {297, 400}, {298, 400}, {299, 400}, {300, 400}, {301, 400}, {302, 400}, {303, 400}, {98, 401}, {99, 401}, {100, 401}, {101, 401}, {102, 401}, {298, 401}, {299, 401}, {300, 401}, {301, 401}, {302, 401}, {99, 402}, {100, 402}, {101, 402}, {299, 402}, {300, 402}, {301, 402}, {100, 403}, {300, 403}, {500, 497}, {499, 498}, {500, 498}, {501, 498}, {498, 499}, {499, 499}, {500, 499}, {501, 499}, {502, 499}, {497, 500}, {498, 500}, {499, 500}, {500, 500}, {501, 500}, {502, 500}, {503, 500}, {498, 501}, {499, 501}, {500, 501}, {501, 501}, {502, 501}, {499, 502}, {500, 502}, {501, 502}, {500, 503}};
//int raw2[][2] = {{0, 0}, {300, 397}, {299, 398}, {300, 398}, {301, 398}, {298, 399}, {299, 399}, {300, 399}, {301, 399}, {302, 399}, {297, 400}, {298, 400}, {299, 400}, {300, 400}, {301, 400}, {302, 400}, {303, 400}, {298, 401}, {299, 401}, {300, 401}, {301, 401}, {302, 401}, {299, 402}, {300, 402}, {301, 402}, {300, 403}, {600, 597}, {599, 598}, {600, 598}, {601, 598}, {598, 599}, {599, 599}, {600, 599}, {601, 599}, {602, 599}, {597, 600}, {598, 600}, {599, 600}, {600, 600}, {601, 600}, {602, 600}, {603, 600}, {598, 601}, {599, 601}, {600, 601}, {601, 601}, {602, 601}, {599, 602}, {600, 602}, {601, 602}, {600, 603}};


//int raw3[][2] = {{0, 0}};
//int raw3[][2] = {{0, 0}, {99, 298}, {100, 298}, {101, 298}, {98, 299}, {99, 299}, {100, 299}, {101, 299}, {102, 299}, {98, 300}, {99, 300}, {100, 300}, {101, 300}, {102, 300}, {98, 301}, {99, 301}, {100, 301}, {101, 301}, {102, 301}, {99, 302}, {100, 302}, {101, 302}, {499, 498}, {500, 498}, {501, 498}, {498, 499}, {499, 499}, {500, 499}, {501, 499}, {502, 499}, {498, 500}, {499, 500}, {500, 500}, {501, 500}, {502, 500}, {498, 501}, {499, 501}, {500, 501}, {501, 501}, {502, 501}, {499, 502}, {500, 502}, {501, 502}};
//int raw3[][2] = {{0, 0}, {599, 98}, {600, 98}, {601, 98}, {598, 99}, {599, 99}, {600, 99}, {601, 99}, {602, 99}, {598, 100}, {599, 100}, {600, 100}, {601, 100}, {602, 100}, {598, 101}, {599, 101}, {600, 101}, {601, 101}, {602, 101}, {599, 102}, {600, 102}, {601, 102}, {399, 298}, {400, 298}, {401, 298}, {398, 299}, {399, 299}, {400, 299}, {401, 299}, {402, 299}, {398, 300}, {399, 300}, {400, 300}, {401, 300}, {402, 300}, {398, 301}, {399, 301}, {400, 301}, {401, 301}, {402, 301}, {399, 302}, {400, 302}, {401, 302}, {199, 498}, {200, 498}, {201, 498}, {198, 499}, {199, 499}, {200, 499}, {201, 499}, {202, 499}, {198, 500}, {199, 500}, {200, 500}, {201, 500}, {202, 500}, {198, 501}, {199, 501}, {200, 501}, {201, 501}, {202, 501}, {199, 502}, {200, 502}, {201, 502}, {299, 598}, {300, 598}, {301, 598}, {298, 599}, {299, 599}, {300, 599}, {301, 599}, {302, 599}, {298, 600}, {299, 600}, {300, 600}, {301, 600}, {302, 600}, {298, 601}, {299, 601}, {300, 601}, {301, 601}, {302, 601}, {299, 602}, {300, 602}, {301, 602}};
//int raw3[][2] = {{0, 0}, {99, 298}, {100, 298}, {101, 298}, {98, 299}, {99, 299}, {100, 299}, {101, 299}, {102, 299}, {98, 300}, {99, 300}, {100, 300}, {101, 300}, {102, 300}, {98, 301}, {99, 301}, {100, 301}, {101, 301}, {102, 301}, {99, 302}, {100, 302}, {101, 302}};

//--------------------------------------------------------------------------------------

int main(int argc, char* const argv[]){                 //DO NOT EDIT OR REMOVE
    #if __linux__                                       //DO NOT EDIT OR REMOVE
        return runCatchTests(argc, argv);               //DO NOT EDIT OR REMOVE
    #endif                                              //DO NOT EDIT OR REMOVE

    // s t a r t   h e r e . . .

//----------------------------------------- f e t c h   r a w   d a t a   f i l e s -----------------------------------------------

    inputFunc(file1, file2, file3);

    int giveIndex;
    giveIndex = (countContiguousNumbers(file1)-1)/2;            // file contains raw1, it counts the number, so subtract the numbers of number read by 1, xy coordinates are fixed by 2, so divide by 2 to get the number of data sets, in this case, the array index size
    int data1_Index = giveIndex;
    //cout << "give Index 1 : " << giveIndex << endl;
    int raw1[giveIndex][2];
    int count1 = 0;
    // Extract data from raw1.txt
    extractData(file1, raw1, count1, giveIndex);

    giveIndex = (countContiguousNumbers(file2)-1)/2;
    int data2_Index = giveIndex;
    //cout << "give Index 2 : " << giveIndex << endl;
    int raw2[giveIndex][2];
    int count2 = 0;
    // Extract data from raw2.txt
    extractData(file2, raw2, count2, giveIndex);

    giveIndex = (countContiguousNumbers(file3)-1)/2;
    int data3_Index = giveIndex;
    //cout << "give Index 3 : " << giveIndex << endl;
    int raw3[giveIndex][2];
    int count3 = 0;    
    // Extract data from raw3.txt
    extractData(file3, raw3, count3, giveIndex);

/*
      // Open the file for reading
    std::ifstream file1("raw1.txt");
    std::ifstream file2("raw2.txt");
    std::ifstream file3("raw3.txt");

    // Check if the files are open
    if (!file1.is_open() || !file2.is_open() || !file3.is_open()) {
        std::cerr << "Error opening files!" << endl;
        return 1;
    }

    // Declare vectors to store the extracted data
    std::vector<std::vector<int>> raw1A;
    std::vector<std::vector<int>> raw2A;
    std::vector<std::vector<int>> raw3A;

    // Function to extract numbers from a string
    auto extractNumbers = [](const string& s) {
        std::vector<int> numbers;
        std::istringstream iss(s);
        char c;
        int x, y;
        while (iss >> c >> x >> c >> y >> c) {
            numbers.push_back(x);
            numbers.push_back(y);
        }
        return numbers;
    };

    // Read and process raw1
    string line;
    while (std::getline(file1, line)) {
        raw1A.push_back(extractNumbers(line));
    }

    // Read and process raw2
    while (std::getline(file2, line)) {
        raw2A.push_back(extractNumbers(line));
    }

    // Read and process raw3
    while (std::getline(file3, line)) {
        raw3A.push_back(extractNumbers(line));
    }

    // Close the files
    file1.close();
    file2.close();
    file3.close();


    int raw1[raw1A.size()][2];
    int raw2[raw2A.size()][2];
    int raw3[raw3A.size()][2];

    // Function to copy vector elements to array
    auto copyVectorToArray = [](const std::vector<std::vector<int>>& vectorData, int arrayData[][2]) {
        for (size_t i = 0; i < vectorData.size(); ++i) {
            for (size_t j = 0; j < vectorData[i].size(); ++j) {
                arrayData[i][j] = vectorData[i][j];
            }
        }
    };

    // Convert vectors to arrays
    copyVectorToArray(raw1A, raw1);
    copyVectorToArray(raw2A, raw2);
    copyVectorToArray(raw3A, raw3);
*/
/*
    int raw1[maxPoints][2] = {{-1, -1}};
    int count1 = 0;

    int raw2[maxPoints][2] = {{-1, -1}};
    int count2 = 0;

    int raw3[maxPoints][2] = {{-1, -1}};
    int count3 = 0;

    // Extract data from raw1.txt
    extractData("raw1.txt", raw1, count1);

    // Extract data from raw2.txt
    extractData("raw2.txt", raw2, count2);

    // Extract data from raw3.txt
    extractData("raw3.txt", raw3, count3);
*/


/*    // Open the file
    std::ifstream inputFile(file1);
    // Check if the file is open
    if (!inputFile.is_open()) {
        std::cerr << "Error opening " << file1 << endl;
        return 1;
    }
    // Assuming a maximum of 100 points for arrayRaw1
    int maxPoints = 100;
    int raw1[maxPoints][2];
    int count = 0; // Counter for the number of points read
    // Read the file content
    string line;
    while (std::getline(inputFile, line)) {
        size_t start = line.find("(");
        size_t end = line.find(")");

        while (start != string::npos && end != string::npos) {
            // Extracting the numbers between parentheses
            string point = line.substr(start + 1, end - start - 1);
            // Extracting x and y coordinates
            int x, y;
            sscanf(point.c_str(), "%d, %d", &x, &y);
            // Storing the values in the array
            if (count < maxPoints) {
                raw1[count][0] = x;
                raw1[count][1] = y;
                count++;
            }
            // Move to the next point
            start = line.find("(", end);
            end = line.find(")", start);
        }
    }
    // Close the file
    inputFile.close();
    // Print the extracted values
    //for (int i = 0; i < count; i++) {
    //    cout << arrayRaw1[i][0] << ", " << arrayRaw1[i][1] << endl;
    //}

int data1_Index = count;

    // Open the file
    std::ifstream inputFile2(file2);
    // Check if the file is open
    if (!inputFile2.is_open()) {
        std::cerr << "Error opening " << file2 << endl;
        return 1;
    }
    // Assuming a maximum of 100 points for arrayRaw1
    maxPoints = 100;
    int raw2[maxPoints][2];
    count = 0; // Counter for the number of points read
    // Read the file content
    line = "";
    while (std::getline(inputFile2, line)) {
        size_t start = line.find("(");
        size_t end = line.find(")");

        while (start != string::npos && end != string::npos) {
            // Extracting the numbers between parentheses
            string point = line.substr(start + 1, end - start - 1);
            // Extracting x and y coordinates
            int x, y;
            sscanf(point.c_str(), "%d, %d", &x, &y);
            // Storing the values in the array
            if (count < maxPoints) {
                raw2[count][0] = x;
                raw2[count][1] = y;
                count++;
            }
            // Move to the next point
            start = line.find("(", end);
            end = line.find(")", start);
        }
    }
    // Close the file
    inputFile2.close();
    // Print the extracted values
    //for (int i = 0; i < count; i++) {
    //    cout << arrayRaw1[i][0] << ", " << arrayRaw1[i][1] << endl;
    //}

int data2_Index = count;

   // Open the file
    std::ifstream inputFile3(file3);
    // Check if the file is open
    if (!inputFile3.is_open()) {
        std::cerr << "Error opening " << file3 << endl;
        return 1;
    }
    // Assuming a maximum of 100 points for arrayRaw1
    maxPoints = 100;
    int raw3[maxPoints][2];
    count = 0; // Counter for the number of points read
    // Read the file content
    line;
    while (std::getline(inputFile3, line)) {
        size_t start = line.find("(");
        size_t end = line.find(")");

        while (start != string::npos && end != string::npos) {
            // Extracting the numbers between parentheses
            string point = line.substr(start + 1, end - start - 1);
            // Extracting x and y coordinates
            int x, y;
            sscanf(point.c_str(), "%d, %d", &x, &y);
            // Storing the values in the array
            if (count < maxPoints) {
                raw3[count][0] = x;
                raw3[count][1] = y;
                count++;
            }
            // Move to the next point
            start = line.find("(", end);
            end = line.find(")", start);
        }
    }
    // Close the file
    inputFile3.close();
    // Print the extracted values
    //for (int i = 0; i < count; i++) {
    //    cout << arrayRaw1[i][0] << ", " << arrayRaw1[i][1] << endl;
    //}

int data3_Index = count;

int** raw1 = nullptr;
    int count1 = 0;
    int capacity1 = 10; // Initial capacity, adjust as needed

    // Allocate initial memory for raw1
    raw1 = new int*[capacity1];

    // Extract data from raw1.txt
    extractData("raw1.txt", raw1, count1, capacity1);

    // Print the extracted values for raw1
    cout << "raw1:" << endl;
    for (int i = 0; i < count1; i++) {
        cout << "(" << raw1[i][0] << ", " << raw1[i][1] << ")" << endl;
    }

    // Clean up memory
    cleanupMemory(raw1, count1);

*/

//----------------------------------------------------------------------------------------------------------------------------------

//---------------------- P r o c e s s   &   a p p e n d   r a w   d a t a -------------------------------
//int data1_Index = sizeof(raw1) / sizeof(raw1[0]);              // manually get dimension1 index size
//int data2_Index = sizeof(raw2) / sizeof(raw2[0]);              // manually get dimension1 index size
//int data3_Index = sizeof(raw3) / sizeof(raw3[0]);              // manually get dimension1 index size

//int data1_Index = getIndex(raw1);
//int data2_Index = getIndex(raw2);
//int data3_Index = getIndex(raw3);

cout << "raw1 index: " << data1_Index << endl;
cout << "raw2 index: " << data2_Index << endl;
cout << "raw3 index: " << data3_Index << endl;

int data1[data1_Index][2];                                      // declaring data1
int data2[data2_Index][2];                                      // declaring data2
int data3[data3_Index][2];                                      // declaring data3

copyData(data1, data1_Index, raw1);
copyData(data2, data2_Index, raw2);
copyData(data3, data3_Index, raw3);

data1_Index--;                                                  // after removing (0, 0), decrease the size of array by 1
data2_Index--;                                                  // after removing (0, 0), decrease the size of array by 1
data3_Index--;                                                  // after removing (0, 0), decrease the size of array by 1

//-----------------------------------------------------------------------------------------------------------------------------------------------------






//---------------------------------- s o r t   b y   x - c o o r d i n a t e   i n   a s c e n d i n g   o r d e r ---------------------------------

sortX(data1_Index, data1);
sortX(data2_Index, data2);
sortX(data3_Index, data3);

cout << "\n";
//-----------------------------------------------------------------------------------------------------------------------------------------------------






//------------------------------------ D i s p l a y   d a t a   a r r a y -------------------------------------------
cout << "\n>data1" << endl;
displayDataArray(data1_Index, data1);

cout << "\n>data2" << endl;
displayDataArray(data2_Index, data2);

cout << "\n>data3" << endl;
displayDataArray(data3_Index, data3);

cout << "\n";
//-----------------------------------------------------------------------------------------------------------------------------------------------------






//----------------------- C e l l   e l e m e n t   c o u n t e r ---------------------------------------------------

int xcoord1[6] = {0, 0, 0, 0, 0, 0};                    // number of data exists across the x-axis for data1
int xcoord2[6] = {0, 0, 0, 0, 0, 0};                    // number of data exists across the x-axis for data2
int xcoord3[6] = {0, 0, 0, 0, 0, 0};                    // number of data exists across the x-axis for data3

//-----debugging variables----------
int x1Jump[5] = {0, 0, 0, 0, 0};                        // indexes where distinct data appears for data1
int x2Jump[5] = {0, 0, 0, 0, 0};                        // indexes where distinct data appears for data2        
int x3Jump[5] = {0, 0, 0, 0, 0};                        // indexes where distinct data appears for data3

int difference[3] = {1, 1, 1}; // number of distinct data, every data must have at least 1 distinct data, 1st index for raw1, 2nd index for raw2, 3rd index for raw3
//----------------------------------
cout << "---------------------- R E P O R T   1 ----------------------" << endl;
cout << "number of indexes found: " << data1_Index << endl;
if(data1_Index>0){                                          // not empty set
    for(int i=0;i<data1_Index;i++){
        int indx = int(round(static_cast<double>(data1[i][0])/100.0)-1);
        xcoord1[indx]++;
        xcoord[0][indx].resize(xcoord1[indx]);
        if(i!=data1_Index-1 && data1[i+1][0]-data1[i][0]>threshold){            // distinct value
            difference[0]++;
            cout << "found 1 difference! current difference: " << difference[0] << ", current index: " << i << ", index jump: " << i+1 << endl;
            x1Jump[difference[0]-1] = i+1;
        }
    }
    cout << "\nJump Index > { " ;
    for(int i=0;i<6;i++){
    cout << x1Jump[i] << " ";
    }cout << "}" << endl;

    cout << "\n{ " ;
    for(int i=0;i<6;i++){
    cout << xcoord1[i] << "\t";
    }cout << "}" << endl;
    cout << "\n" << difference[0] << " distinct x-coordinates found!" << endl;

}
else{cout << "Empty data! No coordinates found!" << endl;}
cout << "-------------------------------------------------------------\n" << endl;

cout << "---------------------- R E P O R T   2 ----------------------" << endl;
cout << "number of indexes found: " << data2_Index << endl;
if(data2_Index>0){                                          // not empty set
    for(int i=0;i<data2_Index;i++){
        int indx = int(round(static_cast<double>(data2[i][0])/100.0)-1);
        xcoord2[indx]++;
        xcoord[1][indx].resize(xcoord2[indx]);
        if(i!=data2_Index-1 && data2[i+1][0]-data2[i][0]>threshold){            // distinct value
            difference[1]++;
            cout << "found 1 difference! current difference: " << difference[1] << ", current index: " << i << ", index jump: " << i+1 << endl;
            x2Jump[difference[1]-1] = i+1;
        }
    }
    cout << "\nJump Index > { " ;
    for(int i=0;i<6;i++){
    cout << x2Jump[i] << " ";
    }cout << "}" << endl;

    cout << "\n{ " ;
    for(int i=0;i<6;i++){
    cout << xcoord2[i] << "\t";
    }cout << "}" << endl;
    cout << "\n" << difference[1] << " distinct x-coordinates found!" << endl;

}
else{cout << "Empty data! No coordinates found!" << endl;}
cout << "-------------------------------------------------------------\n" << endl;

cout << "---------------------- R E P O R T   3 ----------------------" << endl;
cout << "number of indexes found: " << data3_Index << endl;
if(data3_Index>0){                                          // not empty set
    for(int i=0;i<data3_Index;i++){
        int indx = int(round(static_cast<double>(data3[i][0])/100.0)-1);
        if(indx < 0){cout << "error!!!" << endl;}
        xcoord3[indx]++;
        xcoord[2][indx].resize(xcoord3[indx]);
        if(i!=data3_Index-1 && data3[i+1][0]-data3[i][0]>threshold){            // distinct value
            difference[2]++;
            cout << "found 1 difference! current difference: " << difference[2] << ", current index: " << i << ", index jump: " << i+1 << endl;
            x3Jump[difference[2]-1] = i+1;
        }
    }
    cout << "\nJump Index > { " ;
    for(int i=0;i<6;i++){
    cout << x3Jump[i] << " ";
    }cout << "}" << endl;

    cout << "\n{ " ;
    for(int i=0;i<6;i++){
    cout << xcoord3[i] << "\t";
    }cout << "}" << endl;
    cout << "\n" << difference[2] << " distinct x-coordinates found!" << endl;

}
else{cout << "Empty data! No coordinates found!" << endl;}
cout << "-------------------------------------------------------------\n" << endl;
//-------------------------------------------------------------------------------------------------------------------




//------------------------------------------ append y-coordinates into each respective column ---------------------------------
int x100A[xcoord1[0]] = {0};
int x200A[xcoord1[1]] = {0};
int x300A[xcoord1[2]] = {0};
int x400A[xcoord1[3]] = {0};
int x500A[xcoord1[4]] = {0};
int x600A[xcoord1[5]] = {0};
if(data1_Index>0){
for(int i=0;i<xcoord1[0];i++){
    x100A[i]=data1[i][1];
}
for(int i=0;i<xcoord1[1];i++){
    x200A[i]=data1[i+xcoord1[0]][1];
}
for(int i=0;i<xcoord1[2];i++){
    x300A[i]=data1[i+xcoord1[0]+xcoord1[1]][1];
}
for(int i=0;i<xcoord1[3];i++){
    x400A[i]=data1[i+xcoord1[0]+xcoord1[1]+xcoord1[2]][1];
}
for(int i=0;i<xcoord1[4];i++){
    x500A[i]=data1[i+xcoord1[0]+xcoord1[1]+xcoord1[2]+xcoord1[3]][1];
}
for(int i=0;i<xcoord1[5];i++){
    x600A[i]=data1[i+xcoord1[0]+xcoord1[1]+xcoord1[2]+xcoord1[3]+xcoord1[4]][1];
}
}

int x100B[xcoord2[0]] = {0};
int x200B[xcoord2[1]] = {0};
int x300B[xcoord2[2]] = {0};
int x400B[xcoord2[3]] = {0};
int x500B[xcoord2[4]] = {0};
int x600B[xcoord2[5]] = {0};
if(data2_Index>0){
for(int i=0;i<xcoord2[0];i++){
    x100B[i]=data2[i][1];
}
for(int i=0;i<xcoord2[1];i++){
    x200B[i]=data2[i+xcoord2[0]][1];
}
for(int i=0;i<xcoord2[2];i++){
    x300B[i]=data2[i+xcoord2[0]+xcoord2[1]][1];
}
for(int i=0;i<xcoord2[3];i++){
    x400B[i]=data2[i+xcoord2[0]+xcoord2[1]+xcoord2[2]][1];
}
for(int i=0;i<xcoord2[4];i++){
    x500B[i]=data2[i+xcoord2[0]+xcoord2[1]+xcoord2[2]+xcoord2[3]][1];
}
for(int i=0;i<xcoord2[5];i++){
    x600B[i]=data2[i+xcoord2[0]+xcoord2[1]+xcoord2[2]+xcoord2[3]+xcoord2[4]][1];
}
}

int x100C[xcoord3[0]] = {0};
int x200C[xcoord3[1]] = {0};
int x300C[xcoord3[2]] = {0};
int x400C[xcoord3[3]] = {0};
int x500C[xcoord3[4]] = {0};
int x600C[xcoord3[5]] = {0};
if(data3_Index>0){
for(int i=0;i<xcoord3[0];i++){
    x100C[i]=data3[i][1];
}
for(int i=0;i<xcoord3[1];i++){
    x200C[i]=data3[i+xcoord3[0]][1];
}
for(int i=0;i<xcoord3[2];i++){
    x300C[i]=data3[i+xcoord3[0]+xcoord3[1]][1];
}
for(int i=0;i<xcoord3[3];i++){
    x400C[i]=data3[i+xcoord3[0]+xcoord3[1]+xcoord3[2]][1];
}
for(int i=0;i<xcoord3[4];i++){
    x500C[i]=data3[i+xcoord3[0]+xcoord3[1]+xcoord3[2]+xcoord3[3]][1];
}
for(int i=0;i<xcoord3[5];i++){
    x600C[i]=data3[i+xcoord3[0]+xcoord3[1]+xcoord3[2]+xcoord3[3]+xcoord3[4]][1];
}
}


//vector y-append
int start = 0;
for(int j=0;j<6;j++){
    for(int i=0;i<xcoord[0][j].size();i++){
        xcoord[0][j][i] = data1[i+start][1];
    }
    start += xcoord[0][j].size();
}

start = 0;
for(int j=0;j<6;j++){
    for(int i=0;i<xcoord[1][j].size();i++){
        xcoord[1][j][i] = data2[i+start][1];
    }
    start += xcoord[1][j].size();
}

start = 0;
for(int j=0;j<6;j++){
    for(int i=0;i<xcoord[2][j].size();i++){
        xcoord[2][j][i] = data3[i+start][1];
    }
    start += xcoord[2][j].size();
}


//----------------------------------------------------------------------------------------------------------------------------





//---------------------------------- s o r t   b y   y - c o o r d i n a t e   i n   a s c e n d i n g   o r d e r ---------------------------------
if(data1_Index>0){
    _sort(x100A, xcoord1[0]);
    _sort(x200A, xcoord1[1]);
    _sort(x300A, xcoord1[2]);
    _sort(x400A, xcoord1[3]);
    _sort(x500A, xcoord1[4]);
    _sort(x600A, xcoord1[5]);
    appendMatrix(x100A, xcoord1[0], 0, dataA);
    appendMatrix(x200A, xcoord1[1], 1, dataA);
    appendMatrix(x300A, xcoord1[2], 2, dataA);
    appendMatrix(x400A, xcoord1[3], 3, dataA);
    appendMatrix(x500A, xcoord1[4], 4, dataA);
    appendMatrix(x600A, xcoord1[5], 5, dataA);
}
if(data2_Index>0){
    _sort(x100B, xcoord2[0]);
    _sort(x200B, xcoord2[1]);
    _sort(x300B, xcoord2[2]);
    _sort(x400B, xcoord2[3]);
    _sort(x500B, xcoord2[4]);
    _sort(x600B, xcoord2[5]);
    appendMatrix(x100B, xcoord2[0], 0, dataB);
    appendMatrix(x200B, xcoord2[1], 1, dataB);
    appendMatrix(x300B, xcoord2[2], 2, dataB);
    appendMatrix(x400B, xcoord2[3], 3, dataB);
    appendMatrix(x500B, xcoord2[4], 4, dataB);
    appendMatrix(x600B, xcoord2[5], 5, dataB);
}
if(data3_Index>0){
    _sort(x100C, xcoord3[0]);
    _sort(x200C, xcoord3[1]);
    _sort(x300C, xcoord3[2]);
    _sort(x400C, xcoord3[3]);
    _sort(x500C, xcoord3[4]);
    _sort(x600C, xcoord3[5]);
    appendMatrix(x100C, xcoord3[0], 0, dataC);
    appendMatrix(x200C, xcoord3[1], 1, dataC);
    appendMatrix(x300C, xcoord3[2], 2, dataC);
    appendMatrix(x400C, xcoord3[3], 3, dataC);
    appendMatrix(x500C, xcoord3[4], 4, dataC);
    appendMatrix(x600C, xcoord3[5], 5, dataC);
}


//vectorSort
for(int i=0;i<3;i++){
    for(int j=0;j<6;j++){
        for(int k=1;k<xcoord[i][j].size();k++){
            for(int l=0;l<xcoord[i][j].size()-k;l++){
                if(xcoord[i][j][l]>xcoord[i][j][l+1]){
                int temp = xcoord[i][j][l];
                xcoord[i][j][l] = xcoord[i][j][l+1];
                xcoord[i][j][l+1] = temp;
            }
            }
        }
    }
}

//vectorAppend
for(int i=0;i<3;i++){
    for(int j=0;j<6;j++){
        for(int k=0;k<xcoord[i][j].size();k++){
            int indx = int((round(static_cast<double>(xcoord[i][j][k])/100.0)-1));
            dataV[indx][j] = i+1;
        }
    }
}

//--------------------------------------------------------------------------------------------------------------------------------------------------





//----------------------------------- D i s p l a y   a p p e n d e d   y - c o o r d i n a t e s --------------------------------------------
cout << "\n-----------------------------------------------------------------" << endl;
cout << "  DISPLAYING LIST OF Y-COORDINATES FOR EACH RESPECTIVE X-AXIS " << endl;
cout << "-----------------------------------------------------------------";

//cout << x100A[0] << endl;
cout << "\ndata1 y-coord: ";
cout << "\nx100A: ";
for(int i=0;i<xcoord1[0];i++){              // get xcoord y-coordinate for data1
    cout << x100A[i] << " ";                 // x location = 100
}
cout << "\nx200A: ";
for(int i=0;i<xcoord1[1];i++){
    cout << x200A[i] << " ";
}
cout << "\nx300A: ";
for(int i=0;i<xcoord1[2];i++){
    cout << x300A[i] << " ";
}
cout << "\nx400A: ";
for(int i=0;i<xcoord1[3];i++){
    cout << x400A[i] << " ";
}
cout << "\nx500A: ";
for(int i=0;i<xcoord1[4];i++){
    cout << x500A[i] << " ";
}
cout << "\nx600A: ";
for(int i=0;i<xcoord1[5];i++){
    cout << x600A[i] << " ";
}

cout << "\n\ndata2 y-coord: ";
cout << "\nx100B: ";
for(int i=0;i<xcoord2[0];i++){              // get xcoord y-coordinate for data2
    cout << x100B[i] << " ";                 // x location = 100
}
cout << "\nx200B: ";
for(int i=0;i<xcoord2[1];i++){
    cout << x200B[i] << " ";
}
cout << "\nx300B: ";
for(int i=0;i<xcoord2[2];i++){
    cout << x300B[i] << " ";
}
cout << "\nx400B: ";
for(int i=0;i<xcoord2[3];i++){
    cout << x400B[i] << " ";
}
cout << "\nx500B: ";
for(int i=0;i<xcoord2[4];i++){
    cout << x500B[i] << " ";
}
cout << "\nx600B: ";
for(int i=0;i<xcoord2[5];i++){
    cout << x600B[i] << " ";
}

cout << "\n\ndata3 y-coord: ";
cout << "\nx100C: ";
for(int i=0;i<xcoord3[0];i++){              // get xcoord y-coordinate for data3
    cout << x100C[i] << " ";                 // x location = 100
}
cout << "\nx200C: ";
for(int i=0;i<xcoord3[1];i++){
    cout << x200C[i] << " ";
}
cout << "\nx300C: ";
for(int i=0;i<xcoord3[2];i++){
    cout << x300C[i] << " ";
}
cout << "\nx400C: ";
for(int i=0;i<xcoord3[3];i++){
    cout << x400C[i] << " ";
}
cout << "\nx500C: ";
for(int i=0;i<xcoord3[4];i++){
    cout << x500C[i] << " ";
}
cout << "\nx600C: ";
for(int i=0;i<xcoord3[5];i++){
    cout << x600C[i] << " ";
}
//------------------------------------------------------------------------------------------------------------------





/*/cout << "\n" << ydifference << " distinct y-coordinates found across x100A!" << endl;
cout << "\n";
for(int i=0;i<6;i++){               // dont care the unknown indexes, get every index+1, if index number later 0 is 0, ignore, maximum contain 6 distinct location
    cout << "jump index " << i+1 << " : " << x1Jump[i] << endl;
}*/
cout << "\n\n";
displayMatrix(dataA, "R a w   1", 1);
displayMatrix(dataB, "R a w   2", 1);
displayMatrix(dataC, "R a w   3", 1);

setData(dataA, 1);
setData(dataB, 2);
setData(dataC, 3);

// Add dataA, dataB, dataC into Matrix
for(int i=0;i<6;i++){
        for(int j=0;j<6;j++){
            data[i][j] += dataA[i][j];
            data[i][j] += dataB[i][j];
            data[i][j] += dataC[i][j];
        }
    }
    

displayMatrix(data, "F i n a l", 1);
vectorDataDisplay();
//writeDataToFile("output.txt", data);




    std::ofstream outputFile(outputTxt);
    std::ifstream sourceFile1(file1);
    std::ifstream sourceFile2(file2);
    std::ifstream sourceFile3(file3);
/*
    // Check if the file is open
    if (!outputFile.is_open()) {
        std::cerr << "Error opening the file: " << outputTxt << endl;
        return;
    }

    // Write the array contents to the file
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 6; j++) {
            outputFile << data[i][j] << " ";
        }
        outputFile << endl;
    }

    // Display location
    outputFile << "Location: \n" << location << endl;
*/

    outputFile << "Location of data: \n" << location << "\n" << endl;
    // Write the array contents to the file
    

    // Display raw data fed
    string _line;
    oout << "Input ";
    while(std::getline(sourceFile1, _line)) {
        oout << _line << endl;
    }
    oout << "Input ";
    while(std::getline(sourceFile2, _line)) {
        oout << _line << endl;
    }
    oout << "Input ";
    while(std::getline(sourceFile3, _line)) {
        oout << _line << endl;
    }
    oout << "\n\n";
    sourceFile1.close();
    sourceFile2.close();
    sourceFile3.close();
    
    // Display raw data indices
    oout << "raw1 Index: " << data1_Index << endl;
    oout << "raw2 Index: " << data2_Index << endl;
    oout << "raw3 Index: " << data3_Index << endl;
    oout << "\n\n";

    // Display copied and sorted data (sort by x-coordinate)
    oout << ">data1 (sorted by x-axis ascending order)" << endl;
    if(data1_Index>0){
        for(int i=0;i<data1_Index;i++){
            for(int j=0;j<2;j++){
               oout << data1[i][j] << " ";
            }
            oout << " | "; //"\n";
        }
    }
    else{oout << "Empty data!" << endl;}
    oout << "\n\n";
    oout << ">data2 (sorted by x-axis ascending order)" << endl;
    if(data2_Index>0){
        for(int i=0;i<data2_Index;i++){
            for(int j=0;j<2;j++){
               oout << data2[i][j] << " ";
            }
            oout << " | "; //"\n";
        }
    }
    else{oout << "Empty data!" << endl;}
    oout << "\n\n";
    oout << ">data3 (sorted by x-axis ascending order)" << endl;
    if(data3_Index>0){
        for(int i=0;i<data3_Index;i++){
            for(int j=0;j<2;j++){
               oout << data3[i][j] << " ";
            }
            oout << " | "; //"\n";
        }
    }
    else{oout << "Empty data!" << endl;}
    oout << "\n\n";

    // Display preliminary report
    oout << "-----------------------------------------------------------------" << endl;
    oout << "--------- P R E L I M I N A R Y     R E P O R T -----------------" << endl;
    if(data1_Index>0){
    oout << "---------------------- R E P O R T   1 --------------------------" << endl;
    oout << "number of indexes found: " << data1_Index << endl;
    oout << "[\t";
    for(int i=0;i<6;i++){
    oout << xcoord1[i] << "\t";
    }oout << "]" << endl;
    oout << " " << difference[0] << " distinct x-coordinates found!" << endl;
    }
    else{oout << "Empty data! No coordinates found!" << endl;}
    oout << "-----------------------------------------------------------------\n" << endl;

    if(data2_Index>0){
    oout << "---------------------- R E P O R T   2 ----------------------" << endl;
    oout << "number of indexes found: " << data2_Index << endl;
    oout << "[\t";
    for(int i=0;i<6;i++){
    oout << xcoord2[i] << "\t";
    }oout << "]" << endl;
    oout << " " << difference[1] << " distinct x-coordinates found!" << endl;
    }
    else{oout << "Empty data! No coordinates found!" << endl;}
    oout << "-----------------------------------------------------------------\n" << endl;

    if(data3_Index>0){
    oout << "---------------------- R E P O R T   3 ----------------------" << endl;
    oout << "number of indexes found: " << data3_Index << endl;
    oout << "[\t";
    for(int i=0;i<6;i++){
    oout << xcoord3[i] << "\t";
    }oout << "]" << endl;
    oout << " " << difference[2] << " distinct x-coordinates found!" << endl;
    }
    else{oout << "Empty data! No coordinates found!" << endl;}
    oout << "-----------------------------------------------------------------\n" << endl;

    // Displaying y-coordinates
    oout << "\n-----------------------------------------------------------------" << endl;
    oout << "  DISPLAYING LIST OF Y-COORDINATES FOR EACH RESPECTIVE X-AXIS " << endl;
    oout << "-----------------------------------------------------------------";
    oout << "\ndata1 y-coord: ";
    oout << "\nx100A: ";
    for(int i=0;i<xcoord1[0];i++){              // get xcoord y-coordinate for data1
        oout << x100A[i] << " ";                 // x location = 100
    }
    oout << "\nx200A: ";
    for(int i=0;i<xcoord1[1];i++){
    oout << x200A[i] << " ";
    }
    oout << "\nx300A: ";
    for(int i=0;i<xcoord1[2];i++){
        oout << x300A[i] << " ";
    }
    oout << "\nx400A: ";
    for(int i=0;i<xcoord1[3];i++){
        oout << x400A[i] << " ";
    }
    oout << "\nx500A: ";
    for(int i=0;i<xcoord1[4];i++){
        oout << x500A[i] << " ";
    }
    oout << "\nx600A: ";
    for(int i=0;i<xcoord1[5];i++){
        oout << x600A[i] << " ";
    }

    oout << "\n\ndata2 y-coord: ";
    oout << "\nx100B: ";
    for(int i=0;i<xcoord2[0];i++){              // get xcoord y-coordinate for data2
        oout << x100B[i] << " ";                 // x location = 100
    }
    oout << "\nx200B: ";
    for(int i=0;i<xcoord2[1];i++){
        oout << x200B[i] << " ";
    }
    oout << "\nx300B: ";
    for(int i=0;i<xcoord2[2];i++){
    oout << x300B[i] << " ";
    }
    oout << "\nx400B: ";
    for(int i=0;i<xcoord2[3];i++){
        oout << x400B[i] << " ";
    }
    oout << "\nx500B: ";
    for(int i=0;i<xcoord2[4];i++){
        oout << x500B[i] << " ";
    }
    oout << "\nx600B: ";
    for(int i=0;i<xcoord2[5];i++){
        oout << x600B[i] << " ";
    }

    oout << "\n\ndata3 y-coord: ";
    oout << "\nx100C: ";
    for(int i=0;i<xcoord3[0];i++){              // get xcoord y-coordinate for data3
        oout << x100C[i] << " ";                 // x location = 100
    }
    oout << "\nx200C: ";
    for(int i=0;i<xcoord3[1];i++){
        oout << x200C[i] << " ";
    }
    oout << "\nx300C: ";
    for(int i=0;i<xcoord3[2];i++){
        oout << x300C[i] << " ";
    }
    oout << "\nx400C: ";
    for(int i=0;i<xcoord3[3];i++){
        oout << x400C[i] << " ";
    }
    oout << "\nx500C: ";
    for(int i=0;i<xcoord3[4];i++){
        oout << x500C[i] << " ";
    }
    oout << "\nx600C: ";
    for(int i=0;i<xcoord3[5];i++){
        oout << x600C[i] << " ";
    }
    oout << "\n-----------------------------------------------------------------" << endl;
    oout << "\n\n";

    // Display for Matrix form
    oout << "------------------ M a t r i x   D i s p l a y ------------------" << endl;
    oout << "Clean mode: ";
    if(_toggleClear){oout << "ON";}else{oout << "OFF";}oout << "\n\n";
    oout << "------- M a t r i x   d a t a   f o r   d a t a   1 -------------\n";
    oout << "___________________________________________________" << endl;
    oout << "\tR1\tR2\tR3\tR4\tR5\tNS" << endl;
    for(int j=0;j<6;j++){
        if(j<4){
            oout << "D\t";
        }
        else{oout << "R\t";}
        for(int i=0;i<6;i++){
            if(dataA[j][i]==0 && _toggleClear){oout << "\t";}
            else{oout << dataA[j][i] << "\t";}
        }
        oout << "\n";
    }   oout << "_________________________________________________________________" << endl;
    //oout << "\n-----------------------------------------------------------------------------\n";

    oout << "------- M a t r i x   d a t a   f o r   d a t a   2 -------------\n";
    oout << "___________________________________________________" << endl;
    oout << "\tR1\tR2\tR3\tR4\tR5\tNS" << endl;
    for(int j=0;j<6;j++){
        if(j<4){
            oout << "D\t";
        }
        else{oout << "R\t";}
        for(int i=0;i<6;i++){
            if(dataB[j][i]==0 && _toggleClear){oout << "\t";}
            else{oout << dataB[j][i] << "\t";}
        }
        oout << "\n";
    }   oout << "_________________________________________________________________" << endl;
    //oout << "\n-----------------------------------------------------------------------------\n";

    oout << "------- M a t r i x   d a t a   f o r   d a t a   3 -------------\n";
    oout << "___________________________________________________" << endl;
    oout << "\tR1\tR2\tR3\tR4\tR5\tNS" << endl;
    for(int j=0;j<6;j++){
        if(j<4){
            oout << "D\t";
        }
        else{oout << "R\t";}
        for(int i=0;i<6;i++){
            if(dataC[j][i]==0 && _toggleClear){oout << "\t";}
            else{oout << dataC[j][i] << "\t";}
        }
        oout << "\n";
    }   oout << "_________________________________________________________________" << endl;
   // oout << "\n-----------------------------------------------------------------------------\n";

    oout << "----------------- F i n a l   M a t r i x -----------------------\n";
    oout << "___________________________________________________" << endl;
    oout << "\tR1\tR2\tR3\tR4\tR5\tNS" << endl;
    for(int j=0;j<6;j++){
        if(j<4){
            oout << "D\t";
        }
        else{oout << "R\t";}
        for(int i=0;i<6;i++){
            if(data[j][i]==0 && _toggleClear){oout << "\t";}
            else{oout << data[j][i] << "\t";}
        }
        oout << "\n";
    }   oout << "_________________________________________________________________" << endl;
    //oout << "\n-----------------------------------------------------------------------------\n";
    oout << "\n";

    // bye

    oout << "\t\tE N D   O F   R E P O R T" << endl;
    oout << "\n-----------------------------------------------------------------\n";
    oout << "\n";
    oout << "                   T h a n k   y o u" << endl;
    oout << "\n             H a v e   a   g o o d   d a y   : ) \n" << endl;
    oout << "\n-----------------------------------------------------------------\n";
    

    // quick display
    oout << "\n\n\n\n\n";
    oout << "---------------\nvanilla mode (debugging)\n---------------\n";
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 6; j++) {
            outputFile << data[i][j] << " ";
        }
        outputFile << endl;
    }

    oout << "\n\nVector data\n";
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 6; j++) {
            outputFile << dataV[i][j] << " ";
        }
        outputFile << endl;
    }


    // Close the file
    outputFile.close();
    
    cout << "\nData has been written to output.txt\nReport generated" << endl;
   
    closing();

return 0;

}

void vectorDataDisplay(){
    cout << "\nData verification (Vector data) \n\n";

    for(int k=0;k<3;k++){
        for(int i=0;i<6;i++){
            cout << "X" << i+1 << "00 > ";
            for(int j=0;j<xcoord[k][i].size();j++){
                cout << xcoord[k][i][j] << " ";
            }
            cout << "\n";
        }
        cout << "\n";
    }

    cout << "\n";

    for(int i=0;i<6;i++){
        for(int j=0;j<6;j++){
            cout << dataV[i][j] << " ";
        }
       cout << "\n";
    }
}

